#!/usr/bin/env bash

#you need to switch on dumping:
#ulimit -c unlimited
#echo core.%p > /proc/sys/kernel/core_pattern
SCRIPT_PATH="$(cd `dirname $0` && pwd)"

#BINPATH is settled by cmake"
BINPATH="$SCRIPT_PATH"
PROGRAM="$BINPATH/autowash_qml"
LOGPATH=~/.autowash
mkdir -p "$LOGPATH"
LOGFILE="$LOGPATH/autowash.log"
FIFO_DIR=$(mktemp -d "${TMPDIR:-/tmp/}$autowash_run.XXXXXXXXXXXX")
FIFO="$FIFO_DIR/log_redirection"
READ_TIMEOUT=5

export QT_LOGGING_RULES=*.debug=true
export QT_LOGGING_RULES=qt.multimedia.*=true 

log() {
  date=$(date '+%d.%m.%Y %H:%M:%S')
  echo "$date" watchdog "$1"  
}


error() {
  date=$(date '+%d.%m.%Y %H:%M:%S')
  echo "$date" watchdog "$1" >&2
}


kill_prog() {
  log "Sig received"
  KILLTIMEOUT=3
  if [[ -n $pid ]] ; then
     kill $pid > /dev/null 2>&1
     log "Sigterm sended"
     starttime=$(date +%s)
     while kill -0 $pid > /dev/null 2>&1  && [[ $(( $(date +%s) - $starttime))  -le $KILLTIMEOUT ]]; do
      log "Waiting for process dying"
      sleep 1
     done
     kill -9 $pid > /dev/null 2>&1
     wait $pid
  fi
  exit 1

}

trap kill_prog EXIT SIGHUP SIGINT SIGTERM SIGKILL


exec  &> >(rotatelogs -e -n 5 "$LOGFILE" 15M)

trycount=1



while true; do
   mkfifo "$FIFO"
   $PROGRAM > "$FIFO" 2>&1  &
   pid=$!

   log "Starting $PROGRAM .."
   ( 
   while true; do
      if read -t $READ_TIMEOUT line; then
            echo $line
      else
        if kill -0 $pid > /dev/null 2>&1; then
            error "$PROGRAM has hanged, will be killed"
            kill -9 $pid > /dev/null 2>&1
            sleep 1
            break
        else
           error "$PROGRAM has failed"
           sleep 1
           break
          
        fi            
      fi    
    

   done
   ) < "$FIFO"

   rm -f "$FIFO"
done

rm -rf "$FIFO_DIR"

