SET (SUBPROJECT autowash_qml)
PROJECT (${SUBPROJECT})

IF (NOT PROJECT_WORKING_CHARSET)
 SET (PROJECT_WORKING_CHARSET "UTF8")
ENDIF(NOT PROJECT_WORKING_CHARSET)


CONFIGURE_FILE(localconfig.h.in "${${SUBPROJECT}_SOURCE_DIR}/localconfig.h" ESCAPE_QUOTES)

SET(CMAKE_INCLUDE_CURRENT_DIR ON)

SET(MOC_HEADERS
   autowashqmlapp.h
   
)

SET (HEADERS
   config.h
   localconfig.h
   settings/settings.h   

) 


SET (SOURCES
   main.cpp
   autowashqmlapp.cpp
   settings/settings.cpp
 
)

FIND_PACKAGE(Qt5Widgets)

IF (NOT Qt5Widgets_FOUND)
  MESSAGE(FATAL_ERROR "Qt5 not found" )
ENDIF (NOT Qt5Widgets_FOUND)

MESSAGE(Qt5Widgets_includes ${Qt5Widgets_INCLUDE_DIRS})
MESSAGE (MOC ${Qt5Core_MOC_EXECUTABLE})



FIND_PACKAGE(Qt5Gui)

IF (NOT Qt5Gui_FOUND)
  MESSAGE(FATAL_ERROR "Qt5 not found" )
ENDIF (NOT Qt5Gui_FOUND)



FIND_PACKAGE(Qt5Network)

IF (NOT Qt5Network_FOUND)
  MESSAGE(FATAL_ERROR "Qt5 not found" )
ENDIF (NOT Qt5Network_FOUND)

FIND_PACKAGE(Qt5Qml)

IF (NOT Qt5Qml_FOUND)
  MESSAGE(FATAL_ERROR "Qt5 qml not found" )
ENDIF (NOT Qt5Qml_FOUND)

FIND_PACKAGE(Qt5Quick)

IF (NOT Qt5Quick_FOUND)
  MESSAGE(FATAL_ERROR "Qt5 not found" )
ENDIF (NOT Qt5Quick_FOUND)

FIND_PACKAGE(Boost COMPONENTS locale )  
IF (NOT Boost_FOUND)
  MESSAGE(FATAL_ERROR "Boost not found" )
ENDIF (NOT Boost_FOUND)


SET (UI_SOURCES)


SOURCE_GROUP ("Header Files" FILES ${HEADERS} ${MOC_HEADERS})
SOURCE_GROUP ("Source Files" FILES ${SOURCES})
SOURCE_GROUP ("Generated Files" FILES ${MOC_SOURCES} ${UI_SOURCES})


#SET(RESOURCE "dashboard.qrc")


#QT5_ADD_RESOURCES(RCCS ${RESOURCE})
QT5_WRAP_CPP(MOC_SOURCES ${MOC_HEADERS})

IF (develop_flags)
    ADD_DEFINITIONS(-DDEVELOP_FLAGS=1)
ENDIF(develop_flags)


ADD_EXECUTABLE(${SUBPROJECT}  ${UI_HEADERS} ${HEADERS} ${MOC_HEADERS} ${SOURCES} ${MOC_SOURCES}  ${UI_SOURCES}   ${GENERATED_SOURCES} ${RCCS} )



CONFIGURE_FILE(run_scripts/autowash_run.in autowash_run ESCAPE_QUOTES)

ADD_CUSTOM_COMMAND (
   OUTPUT  "${OUTPUT_BINDIR}/autowash_run"
   COMMAND ${CMAKE_COMMAND}  -E copy "${CMAKE_CURRENT_BINARY_DIR}/autowash_run" "${OUTPUT_BINDIR}/autowash_run"
   DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/autowash_run"
)


ADD_CUSTOM_TARGET (
   autowash_runscript
   DEPENDS "${OUTPUT_BINDIR}/autowash_run"
   
)

ADD_DEPENDENCIES(${SUBPROJECT} autowash_runscript)
        


#TARGET_LINK_LIBRARIES (${SUBPROJECT}  eom codesysnv iec61131parser ${Boost_LIBRARIES} )
TARGET_LINK_LIBRARIES (${SUBPROJECT}  eom codesysnv iec61131parser qtquickauxitems)

Qt5_USE_MODULES(${SUBPROJECT} Widgets Network Qml Gui Quick)

TARGET_INCLUDE_DIRECTORIES(${SUBPROJECT}  PUBLIC  ${FULL_SOURCE_DIR})

TARGET_COMPILE_DEFINITIONS (${SUBPROJECT}  PUBLIC -DUSE_QT4=1)


IF (develop_flags)
  TARGET_COMPILE_DEFINITIONS(${SUBPROJECT} PUBLIC -DDEVELOP_FLAGS=1)
ENDIF(develop_flags)

INSTALL(TARGETS ${SUBPROJECT} RUNTIME DESTINATION bin)
INSTALL(PROGRAMS "${OUTPUT_BINDIR}/autowash_run" DESTINATION bin )

INSTALL(DIRECTORY gvl qml video DESTINATION share/${SUBPROJECT} FILE_PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ DIRECTORY_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)


