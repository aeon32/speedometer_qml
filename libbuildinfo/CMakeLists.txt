SET (SUBPROJECT buildinfo)
PROJECT (${SUBPROJECT})

SET(INFO_H "${CMAKE_CURRENT_SOURCE_DIR}/info.h")
SET(INFO_H_IN "${CMAKE_CURRENT_SOURCE_DIR}/info.h.in")


SET(CONFIG_H "${CMAKE_CURRENT_SOURCE_DIR}/config.h")
SET(CONFIG_H_IN "${CMAKE_CURRENT_SOURCE_DIR}/config.h.in")

FIND_PACKAGE(Hg)
MESSAGE (${HG_EXECUTABLE})

#по умолчанию кодировка для hg - такая же, как стандартная у исходных файлов
SET (HG_ENCODING cp1251)
#Для windows - костыль
IF (WIN32)
  SET (HG_ENCODING cp866)
ENDIF(WIN32)


ADD_CUSTOM_COMMAND (
 OUTPUT  ${INFO_H}
 COMMAND ${CMAKE_COMMAND} -DINFO_H_IN="${INFO_H_IN}" -DHG_EXECUTABLE="${HG_EXECUTABLE}" -DHG_ENCODING="${HG_ENCODING}" -P "${CMAKE_CURRENT_SOURCE_DIR}/BuildTimeConfigModule.cmake"
 DEPENDS info.h.in
)

ADD_CUSTOM_TARGET (
 ${SUBPROJECT}_aux
 COMMAND ${CMAKE_COMMAND} -DINFO_H_IN="${INFO_H_IN}" -DHG_EXECUTABLE="${HG_EXECUTABLE}" -DHG_ENCODING="${HG_ENCODING}" -P "${CMAKE_CURRENT_SOURCE_DIR}/BuildTimeConfigModule.cmake"
 DEPENDS info.h.in
)


SET (projectVersion undefined)
SET (projectRelease undefined)
SET (projectBuildType DEVELOP)

IF (GLOBAL_VERSION)
 SET (projectVersion ${GLOBAL_VERSION})
ENDIF (GLOBAL_VERSION)

IF (GLOBAL_RELEASE)
 SET (projectRelease ${GLOBAL_RELEASE})
ENDIF (GLOBAL_RELEASE)

IF (PROJECT_BUILD_TYPE)
 SET (projectBuildType ${PROJECT_BUILD_TYPE})
ENDIF (PROJECT_BUILD_TYPE)

CONFIGURE_FILE(${CONFIG_H_IN} ${CONFIG_H} ESCAPE_QUOTES)


ADD_LIBRARY( ${SUBPROJECT}  STATIC buildinfo.h buildinfo.cpp ${INFO_H} config.h)
ADD_DEPENDENCIES( ${SUBPROJECT} ${SUBPROJECT}_aux)

