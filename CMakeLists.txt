CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

SET (PROJECT qt_autowash)
PROJECT (${PROJECT})

SET(CMAKE_INSTALL_PREFIX /usr)

SET (GLOBAL_VERSION "0.1")
SET (GLOBAL_RELEASE "1")
SET (PROJECT_WORKING_CHARSET "UTF-8")
SET (PROJECT_WORKING_LOCALE "ru_RU.UTF-8")
SET (PROJECT_LOG_CHARSET "cp866")

SET (CMAKE_CXX_STANDARD 11)


#подключаем файл, в котором находится список подпапок (переменная SUBDIRS)
INCLUDE (subproject_map.cmake)

#подключаем вспомогательные модули для сборки проекта
SET(CMAKE_MODULE_PATH "${${PROJECT}_SOURCE_DIR}/CMakeModules;${CMAKE_MODULE_PATH}")

#find_package (Boost COMPONENTS python REQUIRED)
#message (${Boost_LIBRARIES})



IF(QTDIR)
 SET(CMAKE_PREFIX_PATH "${QTDIR};${CMAKE_PREFIX_PATH}")
ENDIF(QTDIR)

MESSAGE (CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH})

#Сборка проекта осуществляется целиком, используется всё дерево
SET(FULL_TREE_BUILD 1)

#библиотеки используют QT в качестве фреймворка
SET (USE_QT 1)

#Настройки выходных путей
#Путь для сборки приложений
SET (OUTPUT_BINDIR ${CMAKE_BINARY_DIR}/bin)
#Путь для сборки библиотек
SET (OUTPUT_LIBDIR ${OUTPUT_BINDIR})

SET (OBJ_DIR obj)



#SET (CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_LIBDIR})
SET (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_BINDIR})
SET (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_LIBDIR})


#копируем содержимое переменной окружения TARGET_CONF в одноимённую переменную CMake
#переменная TARGET_CONF задаёт требуемую конфигурацию сборки
IF (NOT DEFINED TARGET_CONF)
  SET(TARGET_CONF DEVELOP CACHE "вариант сборки" INTERNAL FORCE)
ENDIF (NOT DEFINED TARGET_CONF)




#если тип конфигурации проекта - разработка..
IF (TARGET_CONF STREQUAL DEVELOP)
  MESSAGE(Build_type:develop)
  SET (CMAKE_BUILD_TYPE Debug)
  SET (BUILD_WITH_INSTALL_RPATH FALSE)
  SET (PROJECT_BUILD_TYPE DEVELOP)
  SET (develop_flags TRUE)
ENDIF (TARGET_CONF STREQUAL DEVELOP)


IF (TARGET_CONF STREQUAL WORK)
  MESSAGE(Build_type:work)
  SET (CMAKE_BUILD_TYPE Release)
  SET (BUILD_WITH_INSTALL_RPATH FALSE)
  SET (PROJECT_BUILD_TYPE WORK)
  SET (develop_flags FALSE)
ENDIF (TARGET_CONF STREQUAL WORK)

IF (TARGET_CONF STREQUAL DISTRIB)
  MESSAGE(Build_type:distrib)
  SET (CMAKE_BUILD_TYPE Release)
  SET (BUILD_WITH_INSTALL_RPATH TRUE)
  SET (PROJECT_BUILD_TYPE DISTRIB)
  SET (develop_flags FALSE)
ENDIF (TARGET_CONF STREQUAL DISTRIB)


SET (OBJ_DIR ${OBJ_DIR}/${CMAKE_BUILD_TYPE})
SET (EOM_DIR ${EOM_DIR}/${${PROJECT}_SOURCE_DIR})

GET_FILENAME_COMPONENT(FULL_SOURCE_DIR "${${PROJECT}_SOURCE_DIR}" ABSOLUTE)



FIND_PACKAGE(Qt5Widgets)

IF (NOT Qt5Widgets_FOUND)
  MESSAGE(FATAL_ERROR "Qt5 not found" )
ENDIF (NOT Qt5Widgets_FOUND)

MESSAGE(Qt5Widgets_includes ${Qt5Widgets_INCLUDE_DIRS})
MESSAGE (MOC ${Qt5Core_MOC_EXECUTABLE})



FIND_PACKAGE(Qt5Gui)
IF (NOT Qt5Gui_FOUND)
  MESSAGE(FATAL_ERROR "Qt5 not found" )
ENDIF (NOT Qt5Gui_FOUND)



FIND_PACKAGE(Qt5Network)
IF (NOT Qt5Network_FOUND)
  MESSAGE(FATAL_ERROR "Qt5 not found" )
ENDIF (NOT Qt5Network_FOUND)

FIND_PACKAGE(Qt5Qml)

IF (NOT Qt5Qml_FOUND)
  MESSAGE(FATAL_ERROR "Qt5 qml not found" )
ENDIF (NOT Qt5Qml_FOUND)

FIND_PACKAGE(Qt5Quick)
IF (NOT Qt5Quick_FOUND)
  MESSAGE(FATAL_ERROR "Qt5 not found" )
ENDIF (NOT Qt5Quick_FOUND)


IF (MY_MOC)
    SET (Qt5Core_MOC_EXECUTABLE ${MY_MOC})
ENDIF(MY_MOC)

IF (MY_UIC)
    SET (Qt5Widgets_UIC_EXECUTABLE ${MY_UIC})
ENDIF(MY_UIC)


IF (MY_RCC)
    SET (Qt5Core_RCC_EXECUTABLE ${MY_RCC})
ENDIF(MY_RCC)

FOREACH (SUBDIR ${SUBDIRS})
 SET(SUBDIR_PATH "${FULL_SOURCE_DIR}/${SUBDIR}")
 IF ( IS_DIRECTORY "${SUBDIR_PATH}" AND EXISTS "${SUBDIR_PATH}" )
	IF ( EXISTS "${SUBDIR_PATH}/CMakeLists.txt" )
	  ADD_SUBDIRECTORY (${SUBDIR_PATH} ${OBJ_DIR}/${SUBDIR})
    ELSE ( EXISTS "${SUBDIR_PATH}/CMakeLists.txt"  )
	  MESSAGE (WARNING "Warning: directory ${SUBDIR} is in SUBDIRS list, but does not contain CMakeLists.txt")
	ENDIF (  EXISTS "${SUBDIR_PATH}/CMakeLists.txt"  )
 ELSE (IS_DIRECTORY "${SUBDIR_PATH}" AND EXISTS "${SUBDIR_PATH}"  )
	MESSAGE (WARNING "Warning: directory ${SUBDIR} is in SUBDIRS list, but not found or is not directory")
 ENDIF(IS_DIRECTORY "${SUBDIR_PATH}" AND EXISTS "${SUBDIR_PATH}" )


ENDFOREACH (SUBDIR ${SUBDIRS})

IF (TARGET_CONF STREQUAL DISTRIB)
    STRING(TIMESTAMP DISTR_YEAR "%y")    
    STRING(TIMESTAMP DISTR_MONTH "%m")    
    STRING(TIMESTAMP DISTR_DAY "%d")    

    SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "CarEcoWash")
    SET(CPACK_PACKAGE_VENDOR "ASUTP")
    SET(CPACK_PACKAGE_VERSION_MAJOR ${DISTR_YEAR})
    SET(CPACK_PACKAGE_VERSION_MINOR ${DISTR_MONTH})
    SET(CPACK_PACKAGE_VERSION_PATCH ${DISTR_DAY})

    SET(CPACK_GENERATOR "DEB")
    SET(CPACK_DEBIAN_PACKAGE_MAINTAINER ASUTP)

    INCLUDE (CPack)
ENDIF (TARGET_CONF STREQUAL DISTRIB)
